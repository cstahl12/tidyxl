% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/xlsx_formats.R
\name{xlsx_formats}
\alias{xlsx_formats}
\title{Import xlsx (Excel) formatting definitions.}
\usage{
xlsx_formats(path)
}
\arguments{
\item{path}{Path to the xlsx file.}
}
\value{
A nested list of vectors starting at the top level with \code{$style} and
\code{$local}, then drilling down to the vectors that hold the definitions.  E.g.
\code{my_formats$local$font$size}.
}
\description{
\code{xlsx_formats()} imports formatting definitions from spreadsheets.  The
structure is a nested list, e.g. \code{bold} is a vector within the list \code{font},
which is within the list \code{local}, which is within the list
returned by \code{xlsx_formats()}.  You can look up a cell's formatting by
indexing the bottom-level vectors.  See 'Details' for examples.
}
\details{
Cell formatting is returned by \code{\link[tidyxl:xlsx_formats]{tidyxl::xlsx_formats()}}.  There are two types
of formatting: 'style' formatting, such as Excel's built-in styles 'normal',
'bad', etc., and 'local' formatting, which overrides the style.  These are
returned in the \code{$style} and \code{$local} sublists of \code{xlsx_formats()}, with
identical structures.

To look up the local formatting of a given cell, take the cell's
\code{local_format_id} value (\code{my_cells$Sheet1[1, "local_format_id"]}), and use it
as an index into the format structure.  E.g.  to look up the font size,
\code{my_formats$local$font$size[local_format_id]}.  To see all available formats,
type \code{str(my_formats$local)}.

Colours may be recorded in any of three ways: a hexadecimal RGB string with
or without alpha, an 'indexed' colour, and an index into a 'theme'.
\code{xlsx_formats()} dereferences 'indexed' and 'theme' colours to their
hexadecimal RGB string representation, and standardises all RGB strings to
have an alpha channel in the first two characters.  The 'index' and the
'theme' name are still provided.  To filter by an RGB string, you could  look
up the RGB values in a spreadsheet program (e.g. Excel, LibreOffice,
Gnumeric), and use the \code{\link[grDevices:rgb]{grDevices::rgb()}} function to convert these to a
hexadecimal string.
}
\examples{
examples <- system.file("extdata/examples.xlsx", package = "tidyxl")
str(xlsx_formats(examples))

# The formats of particular cells can be retrieved like this:

Sheet1 <- xlsx_cells(examples)$Sheet1
formats <- xlsx_formats(examples)

my_formats$local$font$bold[Sheet1$local_format_id]
my_formats$style$font$bold[Sheet1$style_format]

# To filter for cells of a particular format, first filter the formats to get
# the relevant indices, and then filter the cells by those indices.
bold_indices <- which(my_formats$local$font$bold)
Sheet1[Sheet1$local_format_id \%in\% bold_indices, ]
}
